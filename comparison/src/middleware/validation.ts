import { Request, Response, NextFunction } from 'express';
import { ComparisonRequest } from '../types';

// ÎπÑÍµê ÏöîÏ≤≠ Í≤ÄÏ¶ù ÎØ∏Îì§Ïõ®Ïñ¥
export const validateComparisonRequest = (
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  try {
    const { locations, options }: ComparisonRequest = req.body;

    // ÌïÑÏàò ÌïÑÎìú Í≤ÄÏ¶ù
    if (!locations) {
      res.status(400).json({
        success: false,
        error: 'Validation Error',
        message: 'locations ÌïÑÎìúÎäî ÌïÑÏàòÏûÖÎãàÎã§',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // locations ÌÉÄÏûÖ Í≤ÄÏ¶ù
    if (!Array.isArray(locations)) {
      res.status(400).json({
        success: false,
        error: 'Validation Error',
        message: 'locationsÎäî Î∞∞Ïó¥Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // Îπà Î∞∞Ïó¥ Í≤ÄÏ¶ù
    if (locations.length === 0) {
      res.status(400).json({
        success: false,
        error: 'Validation Error',
        message: 'ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅÏùò Ïû•ÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // ÏµúÎåÄ Í∞úÏàò Ï†úÌïú (10Í∞ú)
    if (locations.length > 10) {
      res.status(400).json({
        success: false,
        error: 'Validation Error',
        message: 'ÏµúÎåÄ 10Í∞úÍπåÏßÄÎßå ÎπÑÍµêÌï† Ïàò ÏûàÏäµÎãàÎã§',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // Í∞Å locationÏù¥ Î¨∏ÏûêÏó¥Ïù∏ÏßÄ Í≤ÄÏ¶ù
    const invalidLocations = locations.filter(loc => typeof loc !== 'string' || loc.trim() === '');
    if (invalidLocations.length > 0) {
      res.status(400).json({
        success: false,
        error: 'Validation Error',
        message: 'Î™®Îì† Ïû•ÏÜåÎ™ÖÏùÄ ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÄ Î¨∏ÏûêÏó¥Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§',
        timestamp: new Date().toISOString()
      });
      return;
    }

    // Ï§ëÎ≥µ Ï†úÍ±∞
    const uniqueLocations = [...new Set(locations.map(loc => loc.trim()))];
    if (uniqueLocations.length !== locations.length) {
      console.log('‚ö†Ô∏è  Duplicate locations detected, removing duplicates');
      req.body.locations = uniqueLocations;
    }

    // options Í≤ÄÏ¶ù (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    if (options) {
      if (options.maxLocations && (typeof options.maxLocations !== 'number' || options.maxLocations < 1)) {
        res.status(400).json({
          success: false,
          error: 'Validation Error',
          message: 'maxLocationsÎäî 1 Ïù¥ÏÉÅÏùò Ïà´ÏûêÏó¨Ïïº Ìï©ÎãàÎã§',
          timestamp: new Date().toISOString()
        });
        return;
      }

      if (options.sortBy && !['crowdLevel', 'location'].includes(options.sortBy)) {
        res.status(400).json({
          success: false,
          error: 'Validation Error',
          message: 'sortByÎäî "crowdLevel" ÎòêÎäî "location"Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§',
          timestamp: new Date().toISOString()
        });
        return;
      }
    }

    console.log(`‚úÖ Validation passed for ${uniqueLocations.length} locations:`, uniqueLocations);
    next();

  } catch (error) {
    console.error('‚ùå Validation error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal Server Error',
      message: 'ÏöîÏ≤≠ Í≤ÄÏ¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
      timestamp: new Date().toISOString()
    });
  }
};

// ÏùºÎ∞òÏ†ÅÏù∏ ÏöîÏ≤≠ Î°úÍπÖ ÎØ∏Îì§Ïõ®Ïñ¥
export const requestLogger = (req: Request, res: Response, next: NextFunction): void => {
  const start = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - start;
    console.log(`üìù ${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`);
  });
  
  next();
};