name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'comparison/**'

env:
  REGISTRY: harbor.bluesunnywings.com/div4u
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      matrix:
        node-version: [18]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || true

      - name: Build frontend (BFF)
        run: |
          cd frontend
          npm run build:bff

      - name: Install comparison dependencies
        run: |
          cd comparison
          npm install

      - name: Run comparison linting
        run: |
          cd comparison
          npm run lint || true

      - name: Build comparison
        run: |
          cd comparison
          npm run build

      - name: Run SCA with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-sca-results.sarif'

      - name: Upload Trivy SCA results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-sca-results.sarif'
          category: 'trivy-sca'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: 
          - { name: "frontend", context: "./frontend", dockerfile: "./frontend/Dockerfile" }
          - { name: "backend", context: "./backend", dockerfile: "./backend/Dockerfile" }
          - { name: "comparison", context: "./comparison", dockerfile: "./comparison/Dockerfile" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.service.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: false
          tags: |
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:latest
          load: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      matrix:
        service: 
          - { name: "frontend" }
          - { name: "backend" }
          - { name: "comparison" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.service.name }} image for scan
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service.name }}
          file: ./${{ matrix.service.name }}/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.service.name }}-results.sarif'
          # severity: 'HIGH,CRITICAL'
          # exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.service.name }}-results.sarif'
          category: 'trivy-${{ matrix.service.name }}'

  push-images:
    name: Push Images
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        service: 
          - { name: "frontend", context: "./frontend", dockerfile: "./frontend/Dockerfile" }
          - { name: "backend", context: "./backend", dockerfile: "./backend/Dockerfile" }
          - { name: "comparison", context: "./comparison", dockerfile: "./comparison/Dockerfile" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push ${{ matrix.service.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:latest

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
          cosign sign --yes ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:latest

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: push-images
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment manifests
        run: |
          sed -i "s|image: ${{ env.REGISTRY }}/div4u-frontend:.*|image: ${{ env.REGISTRY }}/div4u-frontend:${{ env.IMAGE_TAG }}|" k8s/frontend/frontend-deployment.yaml
          sed -i "s|image: ${{ env.REGISTRY }}/div4u-backend:.*|image: ${{ env.REGISTRY }}/div4u-backend:${{ env.IMAGE_TAG }}|" k8s/backend/backend-deployment.yaml
          sed -i "s|image: ${{ env.REGISTRY }}/div4u-comparison:.*|image: ${{ env.REGISTRY }}/div4u-comparison:${{ env.IMAGE_TAG }}|" k8s/comparison/comparison-deployment.yaml

      - name: Commit and push changes
        run: |
          git config --global user.name "rustzh"
          git config --global user.email "soonso00@naver.com"
          git add k8s/*/
          git commit -m "Update image tags to ${{ env.IMAGE_TAG }}" || exit 0
          git push origin main