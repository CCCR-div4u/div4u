name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'comparison/**'

env:
  REGISTRY: harbor.bluesunnywings.com/div4u
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      matrix:
        node-version: [18]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint || true

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Install comparison dependencies
        run: |
          cd comparison
          npm install

      - name: Run comparison linting
        run: |
          cd comparison
          npm run lint || true

      - name: Build comparison
        run: |
          cd comparison
          npm run build

      - name: Run SCA with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-sca-results.sarif'

      - name: Upload Trivy SCA results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-sca-results.sarif'
          category: 'trivy-sca'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        service: 
          - { name: "frontend", context: "./frontend", dockerfile: "./frontend/Dockerfile" }
          - { name: "backend", context: "./backend", dockerfile: "./backend/Dockerfile" }
          - { name: "comparison", context: "./comparison", dockerfile: "./comparison/Dockerfile" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.service.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: false
          tags: |
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:latest
          load: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      matrix:
        service: 
          - { name: "frontend" }
          - { name: "backend" }
          - { name: "comparison" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ${{ matrix.service.name }} image for scan
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service.name }}
          file: ./${{ matrix.service.name }}/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.service.name }}-results.sarif'
          # severity: 'HIGH,CRITICAL'
          # exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.service.name }}-results.sarif'
          category: 'trivy-${{ matrix.service.name }}'

      - name: Upload scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-${{ matrix.service.name }}-results
          path: trivy-${{ matrix.service.name }}-results.sarif
          retention-days: 30

  slack-approval:
    name: Security Review & Deployment Approval
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download security scan results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: trivy-*-results
          merge-multiple: true

      - name: Parse security scan results
        id: parse-results
        run: |
          CRITICAL=0
          HIGH=0
          MEDIUM=0
          SERVICES=""
          
          for file in trivy-*-results.sarif; do
            if [ -f "$file" ]; then
              SERVICE=$(echo "$file" | sed 's/trivy-\(.*\)-results.sarif/\1/')
              SERVICES="$SERVICES $SERVICE"
              
              # Count vulnerabilities by severity
              if command -v jq >/dev/null 2>&1; then
                CRIT_COUNT=$(jq '[.runs[]?.results[]? | select(.level == "error")] | length' "$file" 2>/dev/null || echo 0)
                HIGH_COUNT=$(jq '[.runs[]?.results[]? | select(.level == "warning")] | length' "$file" 2>/dev/null || echo 0)
                MED_COUNT=$(jq '[.runs[]?.results[]? | select(.level == "note")] | length' "$file" 2>/dev/null || echo 0)
                
                CRITICAL=$((CRITICAL + CRIT_COUNT))
                HIGH=$((HIGH + HIGH_COUNT))
                MEDIUM=$((MEDIUM + MED_COUNT))
              fi
            fi
          done
          
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

      - name: Send Slack approval request
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#div4u-ci-alerts'
          custom_payload: |
            {
              "text": "üîç Security Scan Complete - Deployment Approval Required",
              "attachments": [
                {
                  "color": "${{ steps.parse-results.outputs.critical > 0 && 'danger' || steps.parse-results.outputs.high > 0 && 'warning' || 'good' }}",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Services Scanned",
                      "value": "${{ steps.parse-results.outputs.services }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": true
                    },
                    {
                      "title": "üö® Critical",
                      "value": "${{ steps.parse-results.outputs.critical }}",
                      "short": true
                    },
                    {
                      "title": "‚ö†Ô∏è High",
                      "value": "${{ steps.parse-results.outputs.high }}",
                      "short": true
                    },
                    {
                      "title": "üìã Medium",
                      "value": "${{ steps.parse-results.outputs.medium }}",
                      "short": true
                    },
                    {
                      "title": "üìä Security Report",
                      "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Detailed Results>",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "‚úÖ Approve Deployment",
                      "url": "${{ github.server_url }}/${{ github.repository }}/issues",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": "üìã View Security Details",
                      "url": "${{ github.server_url }}/${{ github.repository }}/security"
                    },
                    {
                      "type": "button",
                      "text": "‚ùå Cancel Deployment",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "style": "danger"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Get repository collaborators
        id: get-collaborators
        run: |
          # Get repository collaborators with admin permissions
          COLLABORATORS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/collaborators?permission=admin" \
            | jq -r '.[].login' | tr '\n' ',' | sed 's/,$//')
          
          # Fallback to repository owner if no collaborators found
          if [ -z "$COLLABORATORS" ]; then
            COLLABORATORS="${{ github.repository_owner }}"
          fi
          
          echo "Repository admins: $COLLABORATORS"
          echo "collaborators=$COLLABORATORS" >> $GITHUB_OUTPUT

      - name: Wait for approval from repository owners
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ steps.get-collaborators.outputs.collaborators }}
          minimum-approvals: 1
          issue-title: "üîç Security Review & Deployment Approval - ${{ github.ref_name }}"
          issue-body: |
            ## üîç Security Scan Results Summary
            
            **Repository:** ${{ github.repository }}  
            **Branch:** ${{ github.ref_name }}  
            **Commit:** ${{ github.sha }}  
            **Services Scanned:** ${{ steps.parse-results.outputs.services }}
            
            ### üìä Vulnerability Summary
            - üö® **Critical:** ${{ steps.parse-results.outputs.critical }}
            - ‚ö†Ô∏è **High:** ${{ steps.parse-results.outputs.high }}
            - üìã **Medium:** ${{ steps.parse-results.outputs.medium }}
            
            ### üîó Quick Links
            - [üìä Security Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [üõ°Ô∏è Security Tab](${{ github.server_url }}/${{ github.repository }}/security)
            - [üìù Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            ---
            
            **‚úÖ To approve:** Comment with `approved`, `approve`, `lgtm`, or `yes`  
            **‚ùå To reject:** Comment with `denied`, `deny`, `rejected`, or `no`
            
            **‚è∞ Manual approval required to proceed with deployment.**

  push-images:
    name: Push Images
    runs-on: ubuntu-latest
    needs: slack-approval
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        service: 
          - { name: "frontend", context: "./frontend", dockerfile: "./frontend/Dockerfile" }
          - { name: "backend", context: "./backend", dockerfile: "./backend/Dockerfile" }
          - { name: "comparison", context: "./comparison", dockerfile: "./comparison/Dockerfile" }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Harbor registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push ${{ matrix.service.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:latest

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
          cosign sign --yes ${{ env.REGISTRY }}/div4u-${{ matrix.service.name }}:latest

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: push-images
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment manifests
        run: |
          sed -i "s|image: ${{ env.REGISTRY }}/div4u-frontend:.*|image: ${{ env.REGISTRY }}/div4u-frontend:${{ env.IMAGE_TAG }}|" k8s/frontend/frontend-deployment.yaml
          sed -i "s|image: ${{ env.REGISTRY }}/div4u-backend:.*|image: ${{ env.REGISTRY }}/div4u-backend:${{ env.IMAGE_TAG }}|" k8s/backend/backend-deployment.yaml
          sed -i "s|image: ${{ env.REGISTRY }}/div4u-comparison:.*|image: ${{ env.REGISTRY }}/div4u-comparison:${{ env.IMAGE_TAG }}|" k8s/comparison/comparison-deployment.yaml

      - name: Commit and push changes
        run: |
          git config --global user.name "rustzh"
          git config --global user.email "soonso00@naver.com"
          git add k8s/*/
          git commit -m "Update image tags to ${{ env.IMAGE_TAG }}" || exit 0
          git push origin main