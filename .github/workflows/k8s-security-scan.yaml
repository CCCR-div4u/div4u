name: Kubernetes Security Scan

on:
  # PR 생성/업데이트 시 실행
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'k8s/**'
      - '.github/workflows/k8s-security-scan.yaml'

  # 브랜치 push 시 실행 (메인/개발/테스트 브랜치)
  push:
    branches: [ main, develop, 'feature/k8s-security-scan' ]
    paths:
      - 'k8s/**'
      - '.github/workflows/k8s-security-scan.yaml'

  # 수동 실행
  workflow_dispatch:

  # 정기 스캔 (매일 오전 9시 UTC)
  schedule:
    - cron: '0 9 * * *'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

concurrency:
  group: k8s-security-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # 변경 감지 및 스캔 준비
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      k8s_changed: ${{ steps.filter.outputs.k8s }}
      workflow_changed: ${{ steps.filter.outputs.workflow }}
      should_scan: ${{ steps.decide.outputs.should_scan }}
      scan_reason: ${{ steps.decide.outputs.scan_reason }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            k8s:
              - 'k8s/**'
            workflow:
              - '.github/workflows/k8s-security-scan.yaml'

      - name: Decide scan execution
        id: decide
        run: |
          # 스케줄 실행
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "should_scan=true" >> "$GITHUB_OUTPUT"
            echo "scan_reason=정기 보안 검사 (스케줄)" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 수동 실행
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_scan=true" >> "$GITHUB_OUTPUT"
            echo "scan_reason=수동 실행" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 워크플로 변경
          if [ "${{ steps.filter.outputs.workflow }}" = "true" ]; then
            echo "should_scan=true" >> "$GITHUB_OUTPUT"
            echo "scan_reason=워크플로우 파일 변경" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # k8s 디렉터리 변경
          if [ "${{ steps.filter.outputs.k8s }}" = "true" ]; then
            echo "should_scan=true" >> "$GITHUB_OUTPUT"
            echo "scan_reason=k8s 매니페스트 변경" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 변경사항 없음
          echo "should_scan=false" >> "$GITHUB_OUTPUT"
          echo "scan_reason=변경사항 없음" >> "$GITHUB_OUTPUT"
          echo "⏭️ 스캔 대상에 변경사항이 없습니다"

  # Kubernetes 매니페스트 보안 스캔
  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_scan == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Display scan info
        run: |
          echo "보안 스캔 시작"
          echo "대상: div4u Kubernetes 매니페스트"
          echo "스캔 디렉터리: k8s/"
          echo "실행 이유: ${{ needs.detect-changes.outputs.scan_reason }}"
          echo "브랜치: ${{ github.ref_name }}"
          echo "커밋: ${{ github.sha }}"
          echo
          echo "현재 k8s 디렉터리 파일 목록:"
          ls -la k8s/ || true
          echo
          echo "취약한 테스트 파일 확인:"
          if [ -f "k8s/test-vulnerable-deployment.yaml" ]; then
            echo "✅ test-vulnerable-deployment.yaml 존재 ($(wc -c < k8s/test-vulnerable-deployment.yaml) bytes)"
          else
            echo "❌ test-vulnerable-deployment.yaml 없음"
          fi
          if [ -f "k8s/test-insecure-pod.yaml" ]; then
            echo "✅ test-insecure-pod.yaml 존재 ($(wc -c < k8s/test-insecure-pod.yaml) bytes)"
          else
            echo "❌ test-insecure-pod.yaml 없음"
          fi
          echo "::notice::${{ needs.detect-changes.outputs.scan_reason }}으로 인한 보안 검사 실행"

      - name: Create directories
        run: |
          mkdir -p reports results
          echo "디렉터리 생성 완료: reports, results"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Checkov & deps
        run: |
          pip install -U checkov requests
          checkov --version
          python -V
          echo "✅ Checkov 설치 완료"

      - name: Run Checkov security scan
        shell: bash
        run: |
          echo "Checkov 보안 스캔 시작..."

          # k8s 디렉터리의 모든 YAML을 하나로 합치기
          echo "Kubernetes 매니페스트 파일 수집 중..."
          > "results/all-manifests.yaml"
          find k8s -type f \( -name "*.yaml" -o -name "*.yml" \) | while read -r file; do
            echo "처리 중: $file"
            echo "---" >> "results/all-manifests.yaml"
            cat "$file" >> "results/all-manifests.yaml"
          done

          # 매니페스트 파일 확인
          if [ ! -s "results/all-manifests.yaml" ]; then
            echo "❌ Kubernetes 매니페스트 파일을 찾을 수 없습니다"
            exit 1
          fi

          LINES=$(wc -l < "results/all-manifests.yaml")
          SIZE=$(wc -c < "results/all-manifests.yaml")
          echo "✅ 매니페스트 수집 완료: ${LINES}줄, ${SIZE}바이트"

          # Checkov 스캔 실행 (JSON 출력)
          echo "Checkov 보안 검사 실행 중..."
          if checkov \
              --file results/all-manifests.yaml \
              --framework kubernetes \
              --output json \
              --soft-fail \
              --quiet > reports/checkov-results.json 2>/dev/null; then
            echo "✅ Checkov 스캔 성공"
          else
            echo "⚠️ Checkov 스캔 중 오류 발생, 기본 결과 생성"
          fi

          # JSON 파일 검증 및 기본값 설정
          if [ -f "reports/checkov-results.json" ] && [ -s "reports/checkov-results.json" ]; then
            if python3 -m json.tool reports/checkov-results.json > /dev/null 2>&1; then
              echo "✅ 유효한 JSON 파일 생성: $(wc -c < reports/checkov-results.json) bytes"
            else
              echo "❌ 잘못된 JSON 형식, 기본 JSON 생성"
              echo '{"check_type":"kubernetes","results":{"failed_checks":[]},"summary":{"passed":0,"failed":0,"skipped":0,"parsing_errors":0,"resource_count":0,"checkov_version":"unknown"}}' > reports/checkov-results.json
            fi
          else
            echo "❌ JSON 파일 생성 실패, 기본 JSON 생성"
            echo '{"check_type":"kubernetes","results":{"failed_checks":[]},"summary":{"passed":0,"failed":0,"skipped":0,"parsing_errors":0,"resource_count":"unknown"}}' > reports/checkov-results.json
          fi
          echo "JSON 결과 준비 완료"

      - name: Analyze security results with OpenAI
        if: always()
        id: openai-analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          JSON_FILE="reports/checkov-results.json"
          if [ ! -f "$JSON_FILE" ] || [ -z "$(cat "$JSON_FILE" 2>/dev/null)" ]; then
            echo "analysis_result=보안 검사 결과를 찾을 수 없거나 스캔이 실패했습니다." >> "$GITHUB_OUTPUT"
            echo "issue_count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "OpenAI를 통한 보안 분석 시작..."

          # OpenAI API 호출을 위한 Python 스크립트 생성
          cat > analyze_security.py << 'PY'
          import json, os, sys, requests

          def analyze_checkov_results(json_file):
              try:
                  with open(json_file, 'r', encoding='utf-8') as f:
                      data = json.load(f)

                  # 실패한 검사 추출 (딕셔너리/리스트 구조 모두 지원)
                  failed_checks = []
                  if isinstance(data.get('results'), dict):
                      failed_checks = data['results'].get('failed_checks', [])
                  elif isinstance(data.get('results'), list):
                      for r in data['results']:
                          failed_checks.extend(r.get('failed_checks', []))

                  if not failed_checks:
                      return "✅ 보안 검사 통과: 발견된 보안 이슈가 없습니다."

                  # 심각도별 분류
                  buckets = {'CRITICAL':[], 'HIGH':[], 'MEDIUM':[], 'LOW':[], 'UNKNOWN':[]}
                  for c in failed_checks:
                      sev = (c.get('severity') or 'UNKNOWN').upper()
                      info = {
                          'check_id': c.get('check_id','N/A'),
                          'check_name': c.get('check_name','N/A'),
                          'file_path': c.get('file_path','N/A'),
                          'resource': c.get('resource','N/A'),
                          'description': c.get('description','N/A')
                      }
                      buckets.get(sev if sev in buckets else 'UNKNOWN').append(info)

                  # OpenAI 호출 (키 없으면 기본 리포트 반환)
                  api_key = os.getenv('OPENAI_API_KEY')
                  if not api_key:
                      return basic_report(buckets)

                  prompt = f"""다음은 div4u 프로젝트의 Kubernetes 매니페스트 보안 검사(Checkov) 결과입니다.
                  Critical: {len(buckets['CRITICAL'])}개 / High: {len(buckets['HIGH'])}개 / Medium: {len(buckets['MEDIUM'])}개 / Low: {len(buckets['LOW'])}개
                  상세 이슈: {json.dumps(buckets, ensure_ascii=False, indent=2)}
                  아래 형식으로 한국어 보고서를 작성하세요:
                  1) 전체 요약  2) 우선순위별 이슈 분석(Critical/High 중심)  3) 구체적 수정 방법  4) 프로젝트 특성 고려 권장사항
                  """

                  try:
                      resp = requests.post(
                          'https://api.openai.com/v1/chat/completions',
                          headers={'Authorization': f'Bearer {api_key}', 'Content-Type': 'application/json'},
                          json={
                              'model': 'gpt-4o-mini',
                              'messages': [
                                  {'role': 'system', 'content': '당신은 Kubernetes 보안 전문가입니다.'},
                                  {'role': 'user', 'content': prompt}
                              ],
                              'max_tokens': 3000,
                              'temperature': 0.3
                          },
                          timeout=30
                      )
                      if resp.status_code == 200:
                          return resp.json()['choices'][0]['message']['content']
                      return basic_report(buckets)
                  except Exception:
                      return basic_report(buckets)
              except Exception as e:
                  return f"❌ 분석 실패: {e}"

          def basic_report(b):
              total = sum(len(v) for v in b.values())
              report = [f"## div4u Kubernetes 보안 검사 결과",
                        f"### 요약",
                        f"- 총 이슈: {total}개  (Critical {len(b['CRITICAL'])} / High {len(b['HIGH'])} / Medium {len(b['MEDIUM'])} / Low {len(b['LOW'])})",
                        "### 우선 조치 필요 (Critical+High)"]
              prio = b['CRITICAL'] + b['HIGH']
              if prio:
                  for i, issue in enumerate(prio[:5], 1):
                      report.append(f"**{i}. {issue['check_name']}**  파일:`{issue['file_path']}`  리소스:`{issue['resource']}`  설명:{issue['description']}")
                  if len(prio) > 5:
                      report.append(f"*추가로 {len(prio)-5}개 더 있음*")
              else:
                  report.append("✅ 우선 조치가 필요한 Critical/High 이슈가 없습니다.")
              report.append("### 권장 조치사항\n- Critical/High 우선 해결\n- 컨테이너 보안 컨텍스트/리소스 제한 설정\n- NetworkPolicy/Service 보안 검토\n- 정기 자동 검사 활용")
              return "\n".join(report)

          if __name__ == "__main__":
              jf = sys.argv[1]
              print(analyze_checkov_results(jf))
          PY

          # Python 스크립트 실행
          python3 analyze_security.py "$JSON_FILE" > analysis_result.txt

          # ✅ 멀티라인 출력 (공식 문법)
          {
            echo 'analysis_result<<EOF'
            cat analysis_result.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

          # 이슈 개수 (숫자만 출력)
          ISSUE_COUNT=$(python3 - <<'PY'
          import json, sys
          try:
              with open("reports/checkov-results.json","r",encoding="utf-8") as f:
                  d=json.load(f)
              failed=[]
              if isinstance(d.get("results"), dict):
                  failed = d["results"].get("failed_checks", [])
              elif isinstance(d.get("results"), list):
                  for r in d["results"]:
                      failed.extend(r.get("failed_checks", []))
              print(len(failed))
          except Exception:
              print(0)
          PY
          )
          echo "issue_count=$ISSUE_COUNT" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Issue for security findings
        if: always()
        id: create-issue
        uses: actions/github-script@v7
        env:
          ANALYSIS_RESULT: ${{ steps.openai-analysis.outputs.analysis_result }}
          ISSUE_COUNT: ${{ steps.openai-analysis.outputs.issue_count }}
          SCAN_REASON: ${{ needs.detect-changes.outputs.scan_reason }}
        with:
          script: |
            const analysis = process.env.ANALYSIS_RESULT || '분석 결과를 가져올 수 없습니다.';
            const issueCount = Number(process.env.ISSUE_COUNT || '0');
            const scanReason = process.env.SCAN_REASON || 'Unknown';

            if (Number.isFinite(issueCount) && issueCount > 0) {
              // 간단한 심각도 추정
              const criticalCount = (analysis.match(/Critical/gi) || []).length;
              const highCount = (analysis.match(/High/gi) || []).length;
              const mediumCount = (analysis.match(/Medium/gi) || []).length;
              const lowCount = (analysis.match(/Low/gi) || []).length;

              let priority = 'medium';
              let priorityLabel = 'medium';
              if (criticalCount > 0) { priority = 'critical'; priorityLabel = 'critical'; }
              else if (highCount > 0) { priority = 'high'; priorityLabel = 'high'; }

              const title = `div4u K8s 보안 검사 결과: ${issueCount}개 이슈 발견 (${priority.toUpperCase()})`;
              const branchName = context.ref.replace('refs/heads/', '');
              const commitSha = context.sha.substring(0,7);
              const severityDisplay = [
                criticalCount ? `Critical: ${criticalCount}개` : '',
                highCount ? `High: ${highCount}개` : '',
                mediumCount ? `Medium: ${mediumCount}개` : '',
                lowCount ? `Low: ${lowCount}개` : ''
              ].filter(Boolean).join(' | ');

              const body = `## div4u Kubernetes 보안 검사 결과
              ### 검사 요약
              - **발견된 이슈**: ${issueCount}개
              - **우선순위**: ${priority.toUpperCase()}
              - **실행 이유**: ${scanReason}
              - **브랜치**: \`${branchName}\`
              - **커밋**: \`${commitSha}\`

              ### 심각도별 분포
              ${severityDisplay}

              ---
              ${analysis}

              ## 해결 체크리스트
              - [ ] Critical/High 우선 해결
              - [ ] 매니페스트 수정 및 테스트
              - [ ] 재검사 수행 (PR 시 자동 실행)
              - [ ] ✅ 이슈 해결 확인

              ## 링크
              - [워크플로우 실행 결과](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [div4u k8s 디렉터리](${context.payload.repository.html_url}/tree/${branchName}/k8s)
              - Checkov 정책 가이드: https://www.checkov.io/5.Policy%20Index/kubernetes.html

              *자동 생성된 보안 이슈입니다. 모든 이슈 해결 후 닫아주세요.*`;

              const labels = ['security','k8s','checkov',priorityLabel,'automated'];
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels
              });
              core.setOutput('issue_url', issue.data.html_url);
              core.setOutput('issue_number', issue.data.number);
            } else {
              core.setOutput('issue_url', '');
              core.setOutput('issue_number', '');
            }

      - name: Send Slack notification
        if: always()
        env:
          SLACK_WEBHOOK_URL_CHECKOV: ${{ secrets.SLACK_WEBHOOK_URL_CHECKOV }}
          ANALYSIS_RESULT: ${{ steps.openai-analysis.outputs.analysis_result }}
          ISSUE_COUNT: ${{ steps.openai-analysis.outputs.issue_count }}
          SCAN_REASON: ${{ needs.detect-changes.outputs.scan_reason }}
          ISSUE_URL: ${{ steps.create-issue.outputs.issue_url }}
          ISSUE_NUMBER: ${{ steps.create-issue.outputs.issue_number }}
        run: |
          if [ -z "$SLACK_WEBHOOK_URL_CHECKOV" ]; then
            echo "⚠️ Slack 웹훅 URL이 설정되지 않았습니다"
            exit 0
          fi

          python3 << 'PY'
          import json, os, urllib.request
          webhook_url = os.environ.get('SLACK_WEBHOOK_URL_CHECKOV')
          issue_count = os.environ.get('ISSUE_COUNT','0')
          scan_reason = os.environ.get('SCAN_REASON','Unknown')
          issue_url = os.environ.get('ISSUE_URL','')
          branch_name = os.environ.get('GITHUB_REF_NAME','unknown')

          has_issue = issue_count not in ('0','',None) and issue_count != '0' and issue_url
          header_emoji = "" if has_issue else "✅"
          message_text = (f"div4u K8s 보안 검사 완료\n보안 이슈 {issue_count}개가 발견되었습니다.\n"
                          "상세 분석 결과는 생성된 Issue를 확인하세요.") if has_issue \
                         else "div4u K8s 보안 검사 완료\n보안 이슈가 발견되지 않았습니다.\n모든 검사를 통과했습니다."
          button_text = "보안 이슈 확인" if has_issue else "워크플로우 보기"
          link_url = issue_url if has_issue else f"{os.environ.get('GITHUB_SERVER_URL','https://github.com')}/{os.environ.get('GITHUB_REPOSITORY','')}/actions/runs/{os.environ.get('GITHUB_RUN_ID','')}"

          slack_message = {
            "text": f"{header_emoji} div4u K8s 보안 검사 결과",
            "attachments": [{
              "color": "danger" if has_issue else "good",
              "fields": [
                {"title":"프로젝트","value":"div4u","short":True},
                {"title":"발견된 이슈","value":f"{issue_count}개","short":True},
                {"title":"실행 이유","value":scan_reason,"short":True},
                {"title":"브랜치","value":branch_name,"short":True}
              ],
              "text": message_text
            }]
          }

          data = json.dumps(slack_message, ensure_ascii=False).encode('utf-8')
          req = urllib.request.Request(webhook_url, data=data, headers={'Content-Type':'application/json; charset=utf-8'})
          try:
            with urllib.request.urlopen(req, timeout=10) as r:
              print("✅ Slack 알림 전송 완료 (HTTP", r.status,")")
          except Exception as e:
            print("❌ Slack 알림 전송 실패:", e)
          PY

      - name: Generate SARIF report
        if: always()
        run: |
          echo "SARIF 보고서 생성 중..."
          if [ -f "results/all-manifests.yaml" ]; then
            checkov \
              --file results/all-manifests.yaml \
              --framework kubernetes \
              --output sarif \
              --soft-fail \
              --quiet > reports/checkov-results.sarif || echo "SARIF 생성 실패, 빈 파일 생성"
          fi

          if [ ! -f "reports/checkov-results.sarif" ] || [ ! -s "reports/checkov-results.sarif" ]; then
            cat > reports/checkov-results.sarif << 'EOF'
            {
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": { "driver": { "name": "Checkov", "version": "unknown", "informationUri": "https://www.checkov.io/" } },
                  "results": []
                }
              ]
            }
            EOF
          fi

          echo "✅ SARIF 파일 생성 완료: $(wc -c < reports/checkov-results.sarif) bytes"

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/checkov-results.sarif
          category: div4u-k8s-security
        continue-on-error: true

      - name: Upload scan results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: div4u-k8s-security-scan-results-${{ github.sha }}
          path: |
            reports/
            results/
          if-no-files-found: warn
          retention-days: 30

  # 변경사항이 없을 때 빠른 종료
  no-changes:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_scan == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No changes detected
        run: |
          echo "✅ k8s 디렉터리에 변경사항이 없습니다."
          echo "모니터링 디렉터리: k8s/"
          echo "워크플로 파일: .github/workflows/k8s-security-scan.yaml"
          echo "::notice::변경사항 없음 - 보안 스캔을 건너뜁니다."

  # 스캔 완료 요약
  summary:
    needs: [ detect-changes, security-scan ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Security scan summary
        run: |
          echo "## div4u Kubernetes 보안 스캔 완료"
          echo
          echo "**프로젝트**: div4u"
          echo "**스캔 대상**: k8s/ 디렉터리"
          echo "**실행 이유**: ${{ needs.detect-changes.outputs.scan_reason }}"
          echo "**브랜치**: ${{ github.ref_name }}"
          echo "**커밋**: ${{ github.sha }}"
          echo
          if [ "${{ needs.detect-changes.outputs.should_scan }}" = "true" ]; then
            echo "**스캔 결과**: ${{ needs.security-scan.result }}"
            echo "**실행 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "상세 결과는 아티팩트에서 확인할 수 있습니다."
          else
            echo "**스캔 상태**: 건너뜀 (변경사항 없음)"
          fi
          echo
          echo "### div4u 보안 검사 정보"
          echo "- 자동 트리거: main/develop 브랜치의 k8s/ 변경 시"
          echo "- PR 검사: Pull Request 생성 시 자동 실행"
          echo "- 정기 검사: 매일 09:00 UTC (KST 18:00)"
          echo "- 수동 실행: Actions 탭 'Run workflow'"
